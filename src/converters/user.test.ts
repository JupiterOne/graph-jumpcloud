import { JumpCloudUser } from "../provider/types";
import getTime from "../util/getTime";
import { createUserEntity } from "./user";

describe("creating user entity", () => {
  test("with received all optional data", () => {
    const data: JumpCloudUser = {
      account_locked: false,
      activated: true,
      addresses: [],
      allow_public_key: true,
      attributes: [],
      company: "",
      costCenter: "",
      department: "",
      description: "",
      displayname: "",
      email: "adam.williams@lifeomic.com",
      employeeIdentifier: null,
      employeeType: "",
      enable_managed_uid: false,
      enable_user_portal_multifactor: false,
      external_dn: "",
      external_source_type: "",
      externally_managed: false,
      firstname: "Adam",
      jobTitle: "",
      lastname: "Williams",
      ldap_binding_user: false,
      location: "",
      mfa: {
        exclusion: false,
        configured: false,
      },
      middlename: "",
      password_never_expires: false,
      passwordless_sudo: false,
      phoneNumbers: [],
      samba_service_user: false,
      ssh_keys: [],
      sudo: false,
      suspended: false,
      unix_guid: 5001,
      unix_uid: 5001,
      username: "adam.williams",
      created: "2019-06-16T18:05:43.993Z",
      password_expired: false,
      totp_enabled: false,
      _id: "5d0684f78dc0591fd13acf7d",
      id: "5d0684f78dc0591fd13acf7d",
    };
    expect(createUserEntity(data)).toEqual({
      _key: "5d0684f78dc0591fd13acf7d",
      _type: "jumpcloud_user",
      _class: "User",
      _rawData: [{ name: "default", rawData: data }],
      id: data.id || (data._id as string),
      displayName: data.username as string,
      name: `${data.firstname} ${data.lastname}`,
      username: data.username as string,
      active: true,
      suspended: false,
      createdOn: getTime(data.created)!,
      firstName: data.firstname as string,
      lastName: data.lastname as string,
      login: data.username as string,
      email: data.email as string,
      employeeType: data.employeeType as string,
      employeeId: data.employeeIdentifier as string,
      company: data.company as string,
      department: data.department as string,
      jobTitle: data.jobTitle as string,
      mfaEnabled: false,
      mfaExclusion: false,
      mfaExclusionUntil: getTime(data.mfa!.exclusionUntil),
      mfaConfigured: false,
      externallyManaged: false,
      ldapBindingUser: false,
      sambaServiceUser: false,
      sudo: false,
      webLink:
        "https://console.jumpcloud.com/#/users/5d0684f78dc0591fd13acf7d/details",
    });
  });
});
